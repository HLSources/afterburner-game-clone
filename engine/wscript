#! /usr/bin/env python
# encoding: utf-8
# mittorn, 2018

from waflib import Logs
import os

top = '.'

def options(opt):
	grp = opt.add_option_group('Engine options')

	grp.add_option('--enable-stdin-input', action = 'store_true', dest = 'USE_SELECT', default = False,
		help = 'enable console input from stdin (always enabled for dedicated) [default: %default]')
	grp.add_option('--fbdev', action = 'store_true', dest = 'FBDEV_SW', default = False,
		help = 'build fbdev-only software-only engine')

	opt.load('sdl2')

def configure(conf):
	# check for dedicated server build
	if conf.options.DEDICATED:
		if conf.env.DEST_OS == 'linux':
			conf.check_cc( lib='rt' )
		conf.define('XASH_DEDICATED', 1)
	elif conf.env.DEST_OS == 'android': # Android doesn't need SDL2
		for i in ['android', 'log', 'EGL']:
			conf.check_cc(lib = i)
	elif conf.options.FBDEV_SW:
		conf.define('XASH_FBDEV', 1)
		conf.check_cc(lib = 'asound')
	else:
		conf.load('sdl2')
		if not conf.env.HAVE_SDL2:
			conf.fatal('SDL2 not availiable! If you want to build dedicated server, specify --dedicated')
		conf.define('XASH_SDL', 1)

	if conf.options.USE_SELECT == None:
		conf.options.USE_SELECT = conf.options.DEDICATED

	conf.define_cond('SINGLE_BINARY', conf.env.SINGLE_BINARY)

	conf.define_cond('XASH_USE_SELECT', conf.options.USE_SELECT or conf.options.DEDICATED)
	conf.define_cond('SUPPORT_BSP2_FORMAT', conf.options.SUPPORT_BSP2_FORMAT)
	conf.define_cond('XASH_64BIT', conf.env.DEST_SIZEOF_VOID_P != 4)
	conf.define_cond('DBGHELP', conf.env.DEST_OS == 'win32')
	conf.define_cond('PSAPI_VERSION', conf.env.DEST_OS == 'win32') # will be defined as 1
	conf.define('AFTERBURNER_ENGINE', 1)

def build(bld):
	libs = [ 'public' ]
	source = bld.path.ant_glob([
	    'common/*.c',
		'common/imagelib/*.c',
		'common/soundlib/*.c',
		'common/soundlib/libmpg/*.c',
		'common/bsp/generic/*.c',
		'server/*.c'])

	# basic build: dedicated only, no dependencies
	if bld.env.DEST_OS != 'win32':
		libs += [ 'DL' , 'M' , 'RT', 'PTHREAD']
		source += bld.path.ant_glob(['platform/posix/*.c'])
	else:
		libs += ['USER32', 'SHELL32', 'GDI32', 'ADVAPI32', 'DBGHELP', 'PSAPI', 'WS2_32' ]
		source += bld.path.ant_glob(['platform/win32/*.c'])

	if bld.env.DEST_OS == 'linux':
		source += bld.path.ant_glob(['platform/linux/*.c'])

	source += bld.path.ant_glob(['platform/stub/*.c'])

	if bld.env.HAVE_SDL2:
		libs.append('SDL2')
		source += bld.path.ant_glob(['platform/sdl/*.c'])

	if bld.env.DEST_OS == 'android':
		libs += ['LOG', 'EGL', 'ANDROID']
		source += bld.path.ant_glob(['platform/android/*.cpp', 'platform/android/*.c', 'platform/linux/*.c'])

	# add client files
	if not bld.env.DEDICATED:
		source += bld.path.ant_glob([
			'client/*.c',
			'client/vgui/*.c',
			'client/avi/*.c'])

	if bld.env.DEST_OS == 'linux' and not bld.env.HAVE_SDL2:
		libs.append('RT')
		if not bld.env.DEDICATED:
			libs.append('ASOUND')


	# HACK: public headers must be put before common, so we don't get wrong mathlib included
	includes = \
	[
		'common',
		'common/bsp/generic',
		"common/imagelib",
		'server',
		'client',
		'client/vgui',
		'.',
		'../public',
		'../common',
		'../pm_shared'
	]

	if bld.env.SINGLE_BINARY:
		install_path = bld.env.BINDIR
		features = 'c cprogram'
	else:
		install_path = bld.env.LIBDIR
		features = 'c cshlib'

	bld(source   = source,
		target   = 'xash',
		features = features,
		includes = includes,
		use      = libs,
		install_path = install_path,
		subsystem = bld.env.MSVC_SUBSYSTEM
	)
