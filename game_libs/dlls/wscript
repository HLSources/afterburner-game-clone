#! /usr/bin/env python
# encoding: utf-8

from waflib import Logs
from scripts.buildutils import gamelib_common
import os
import sys

top = '.'

DEFINES = \
[
	"GAME_LIBRARIES",	# Identifies that we're building for the client and server DLLs.
]

INCLUDE_PATHS = \
[
	".",
	"../common",
	"../engine",
	"../pm_shared",
	"../game_shared",
	"../shared_utils/cpp",
	"../public",
	"../game_shared/weapons",
	"../game_shared/weaponattributes",
	"../game_shared/util",
	"../game_shared/gameplay",
	"../../game_menu_shared",
	"../miniutl",
	"bots",
	"bots/profiles",
	"bots/itemattributes",
	"projectInterface_server"
]

# Relative to game_libs folder
SOURCES = \
[
	"miniutl/**/*.cpp",
	"pm_shared/**/*.c",
	"dlls/bots/**/*.cpp",
	"dlls/projectInterface_server/**/*.cpp",

	# TODO: Change the folder structure one day so that we can use globs and not have to do this.
	# Currently we don't want to include absolutely everything...
	"game_shared/weapons/**/*.cpp",
	"game_shared/gameplay/**/*.cpp",
	"game_shared/weaponattributes/**/*.cpp",
	"game_shared/studio_utils_shared.cpp",
	"dlls/agrunt.cpp",
	"dlls/airtank.cpp",
	"dlls/aflock.cpp",
	"dlls/animating.cpp",
	"dlls/animation.cpp",
	"dlls/apache.cpp",
	"dlls/barnacle.cpp",
	"dlls/barney.cpp",
	"dlls/bigmomma.cpp",
	"dlls/bloater.cpp",
	"dlls/bmodels.cpp",
	"dlls/bullsquid.cpp",
	"dlls/buttons.cpp",
	"dlls/cbase.cpp",
	"dlls/client.cpp",
	"dlls/combat.cpp",
	"dlls/controller.cpp",
	"dlls/defaultai.cpp",
	"dlls/doors.cpp",
	"dlls/effects.cpp",
	"dlls/explode.cpp",
	"dlls/flyingmonster.cpp",
	"dlls/func_break.cpp",
	"dlls/func_tank.cpp",
	"dlls/game.cpp",
	"dlls/gamerules.cpp",
	"dlls/gargantua.cpp",
	"dlls/genericmonster.cpp",
	"dlls/ggrenade.cpp",
	"dlls/globals.cpp",
	"dlls/gman.cpp",
	"dlls/h_ai.cpp",
	"dlls/h_battery.cpp",
	"dlls/h_cine.cpp",
	"dlls/h_cycler.cpp",
	"dlls/h_export.cpp",
	"dlls/hassassin.cpp",
	"dlls/headcrab.cpp",
	"dlls/healthkit.cpp",
	"dlls/hgrunt.cpp",
	"dlls/hornet.cpp",
	"dlls/houndeye.cpp",
	"dlls/ichthyosaur.cpp",
	"dlls/islave.cpp",
	"dlls/items.cpp",
	"dlls/leech.cpp",
	"dlls/lights.cpp",
	"dlls/maprules.cpp",
	"dlls/monstermaker.cpp",
	"dlls/monsters.cpp",
	"dlls/monsterstate.cpp",
	"dlls/mortar.cpp",
	"dlls/multiplay_gamerules.cpp",
	"dlls/nihilanth.cpp",
	"dlls/nodes.cpp",
	"dlls/observer.cpp",
	"dlls/osprey.cpp",
	"dlls/pathcorner.cpp",
	"dlls/plane.cpp",
	"dlls/plats.cpp",
	"dlls/player.cpp",
	"dlls/playermonster.cpp",
	"dlls/rat.cpp",
	"dlls/roach.cpp",
	"dlls/schedule.cpp",
	"dlls/scientist.cpp",
	"dlls/scripted.cpp",
	"dlls/singleplay_gamerules.cpp",
	"dlls/skill.cpp",
	"dlls/sound.cpp",
	"dlls/soundent.cpp",
	"dlls/spectator.cpp",
	"dlls/squadmonster.cpp",
	"dlls/subs.cpp",
	"dlls/talkmonster.cpp",
	"dlls/teamplay_gamerules.cpp",
	"dlls/tempmonster.cpp",
	"dlls/tentacle.cpp",
	"dlls/triggers.cpp",
	"dlls/turret.cpp",
	"dlls/util.cpp",
	"dlls/weapons.cpp",
	"dlls/world.cpp",
	"dlls/xen.cpp",
	"dlls/zombie.cpp"
]

def options(opt):
	gamelib_common.options(opt)

	grp = opt.add_option_group("Server options")

	grp.add_option('--enable-voicemgr', action = 'store_true', dest = 'VOICEMGR', default = False,
		help = 'Enable voice manager [default: %default]')

def configure(conf):
	gamelib_common.configure(conf)

	conf.env.VOICEMGR = conf.options.VOICEMGR

	if not conf.env.VOICEMGR:
		conf.define("NO_VOICEGAMEMGR", 1)

	if conf.env.COMPILER_CC == 'msvc':
		# hl.def removes MSVC function name decoration from GiveFnptrsToDll on Windows.
		# Without this, the lookup for this function fails.
		hlDefNode = conf.path.find_resource("./hl.def")

		if hlDefNode is not None:
			conf.env.append_unique('LINKFLAGS', f'/def:{hlDefNode.abspath()}')
		else:
			conf.fatal("Could not find hl.def")

	conf.env.SERVER_DIR = "dlls"
	conf.env.SERVER_TARGET = "hl"

	conf.env.append_unique("DEFINES", DEFINES)

def build(bld):
	sources = bld.path.parent.parent.ant_glob("game_menu_shared/**/*.cpp") + \
			  bld.path.parent.ant_glob(SOURCES)

	if bld.env.VOICEMGR:
		sources += bld.path.parent.ant_glob("game_shared/voice_gamemgr.cpp")

	installPath = os.path.join(bld.env.PREFIX, bld.env.GAMEDIR, bld.env.SERVER_DIR)

	bld.shlib(
		source   = sources,
		target   = bld.env.SERVER_TARGET,
		features = 'c cxx',
		includes = INCLUDE_PATHS,
		defines  = bld.env.DEFINES,
		use      = bld.env.USELIBS,
		install_path = installPath,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	).env.cxxshlib_PATTERN = "%s.so"
