#! /usr/bin/env python
# encoding: utf-8

from waflib import Logs
import os
import sys

top = '.'

COMMON_CXXFLAGS = \
[
	"-fno-exceptions",
	"-Wno-invalid-offsetof"
]

COMMON_DEFINES = \
[
	"GAME_LIBRARIES"	# Identifies that we're building for the client and server DLLs.
]

COMMON_INCLUDE_PATHS = \
[
	"common",
	"engine",
	"pm_shared",
	"game_shared",
	"shared_utils/cpp",
	"public",
	"game_shared/weapons",
	"game_shared/weaponattributes",
	"game_shared/util",
	"game_shared/gameplay",
	"../game_menu_shared",
	"miniutl"
]

SERVER_INCLUDE_PATHS = \
[
	"dlls",
	"dlls/bots",
	"dlls/bots/profiles",
	"dlls/bots/itemattributes",
	"dlls/projectInterface_server"
]

SERVER_SOURCES = \
[
	"miniutl/**/*.cpp",
	"pm_shared/**/*.c",
	"dlls/bots/**/*.cpp",
	"dlls/projectInterface_server/**/*.cpp",

	# TODO: Change the folder structure one day so that we can use globs and not have to do this.
	# Currently we don't want to include absolutely everything...
	"game_shared/weapons/**/*.cpp",
	"game_shared/gameplay/**/*.cpp",
	"game_shared/weaponattributes/**/*.cpp",
	"game_shared/studio_utils_shared.cpp",
	"dlls/agrunt.cpp",
	"dlls/airtank.cpp",
	"dlls/aflock.cpp",
	"dlls/animating.cpp",
	"dlls/animation.cpp",
	"dlls/apache.cpp",
	"dlls/barnacle.cpp",
	"dlls/barney.cpp",
	"dlls/bigmomma.cpp",
	"dlls/bloater.cpp",
	"dlls/bmodels.cpp",
	"dlls/bullsquid.cpp",
	"dlls/buttons.cpp",
	"dlls/cbase.cpp",
	"dlls/client.cpp",
	"dlls/combat.cpp",
	"dlls/controller.cpp",
	"dlls/defaultai.cpp",
	"dlls/doors.cpp",
	"dlls/effects.cpp",
	"dlls/explode.cpp",
	"dlls/flyingmonster.cpp",
	"dlls/func_break.cpp",
	"dlls/func_tank.cpp",
	"dlls/game.cpp",
	"dlls/gamerules.cpp",
	"dlls/gargantua.cpp",
	"dlls/genericmonster.cpp",
	"dlls/ggrenade.cpp",
	"dlls/globals.cpp",
	"dlls/gman.cpp",
	"dlls/h_ai.cpp",
	"dlls/h_battery.cpp",
	"dlls/h_cine.cpp",
	"dlls/h_cycler.cpp",
	"dlls/h_export.cpp",
	"dlls/hassassin.cpp",
	"dlls/headcrab.cpp",
	"dlls/healthkit.cpp",
	"dlls/hgrunt.cpp",
	"dlls/hornet.cpp",
	"dlls/houndeye.cpp",
	"dlls/ichthyosaur.cpp",
	"dlls/islave.cpp",
	"dlls/items.cpp",
	"dlls/leech.cpp",
	"dlls/lights.cpp",
	"dlls/maprules.cpp",
	"dlls/monstermaker.cpp",
	"dlls/monsters.cpp",
	"dlls/monsterstate.cpp",
	"dlls/mortar.cpp",
	"dlls/multiplay_gamerules.cpp",
	"dlls/nihilanth.cpp",
	"dlls/nodes.cpp",
	"dlls/observer.cpp",
	"dlls/osprey.cpp",
	"dlls/pathcorner.cpp",
	"dlls/plane.cpp",
	"dlls/plats.cpp",
	"dlls/player.cpp",
	"dlls/playermonster.cpp",
	"dlls/rat.cpp",
	"dlls/roach.cpp",
	"dlls/schedule.cpp",
	"dlls/scientist.cpp",
	"dlls/scripted.cpp",
	"dlls/singleplay_gamerules.cpp",
	"dlls/skill.cpp",
	"dlls/sound.cpp",
	"dlls/soundent.cpp",
	"dlls/spectator.cpp",
	"dlls/squadmonster.cpp",
	"dlls/subs.cpp",
	"dlls/talkmonster.cpp",
	"dlls/teamplay_gamerules.cpp",
	"dlls/tempmonster.cpp",
	"dlls/tentacle.cpp",
	"dlls/triggers.cpp",
	"dlls/turret.cpp",
	"dlls/util.cpp",
	"dlls/weapons.cpp",
	"dlls/world.cpp",
	"dlls/xen.cpp",
	"dlls/zombie.cpp"
]

CLIENT_INCLUDE_PATHS = \
[
	"cl_dll",
	"utils/false_vgui/include"
	"cl_dll/hl",
	"cl_dll/events",
	"cl_dll/projectInterface_client"
]

CLIENT_SOURCES = \
[
	"miniutl/**/*.cpp",
	"pm_shared/**/*.c",
	"cl_dll/events/**/*.cpp",
	"cl_dll/hl/**/*.cpp",
	"cl_dll/projectInterface_client/**/*.cpp",

	# TODO: Change the folder structure one day so that we can use globs and not have to do this.
	# Currently we don't want to include absolutely everything...
	"game_shared/weapons/**/*.cpp",
	"game_shared/gameplay/**/*.cpp",
	"game_shared/weaponattributes/**/*.cpp",
	"game_shared/studio_utils_shared.cpp",
	"cl_dll/ev_hldm.cpp",
	"cl_dll/ammo.cpp",
	"cl_dll/ammo_secondary.cpp",
	"cl_dll/ammohistory.cpp",
	"cl_dll/battery.cpp",
	"cl_dll/cdll_int.cpp",
	"cl_dll/com_weapons.cpp",
	"cl_dll/death.cpp",
	"cl_dll/demo.cpp",
	"cl_dll/entity.cpp",
	"cl_dll/ev_common.cpp",
	"cl_dll/events.cpp",
	"cl_dll/flashlight.cpp",
	"cl_dll/GameStudioModelRenderer.cpp",
	"cl_dll/geiger.cpp",
	"cl_dll/health.cpp",
	"cl_dll/hud.cpp",
	"cl_dll/hud_msg.cpp",
	"cl_dll/hud_redraw.cpp",
	"cl_dll/hud_spectator.cpp",
	"cl_dll/hud_update.cpp",
	"cl_dll/in_camera.cpp",
	"cl_dll/input.cpp",
	"cl_dll/input_goldsource.cpp",
	"cl_dll/input_mouse.cpp",
	"cl_dll/input_xash3d.cpp",
	"cl_dll/menu.cpp",
	"cl_dll/message.cpp",
	"cl_dll/overview.cpp",
	"cl_dll/parsemsg.cpp",
	"cl_dll/saytext.cpp",
	"cl_dll/status_icons.cpp",
	"cl_dll/statusbar.cpp",
	"cl_dll/studio_util.cpp",
	"cl_dll/StudioModelRenderer.cpp",
	"cl_dll/text_message.cpp",
	"cl_dll/train.cpp",
	"cl_dll/tri.cpp",
	"cl_dll/util.cpp",
	"cl_dll/view.cpp",
	"cl_dll/scoreboard.cpp",
	"cl_dll/MOTD.cpp"
]

# TODO: Common game stlib here!
LIBS = []

def options(opt):
	opt.add_option('--use-voicemgr', dest='use_voicemgr', action='store_true', help='Include voice manager code.')

def configure(conf):
	conf.load('compiler_cxx')

	# Identifies that we're building for the client and server DLLs.
	conf.env.append_unique("DEFINES", COMMON_DEFINES)
	conf.env.append_unique("CXXFLAGS", COMMON_CXXFLAGS)

	if conf.env.DEST_OS == 'win32':
		conf.env.append_unique("DEFINES",
		[
			"_WIN32",
			"NOMINMAX"
		])

		# Needed to avoid warnings with MiniUTL.
		# 4005 = Macro redefinition
		# 4244 = Possible loss of data on type cast
		conf.env.append_unique("CXXFLAGS",
		[
			"/WX",
			"/wd4005",
			"/wd4244"
		])

		conf.env.GAMELIB_EXT = ".dll"
	else:
		conf.env.append_unique("DEFINES",
		[
			"_LINUX",	# Apparently this covers all non-Windows platforms adequately.
			"stricmp=strcasecmp",
			"strnicmp=strncasecmp",
			"_snprintf=snprintf",
			"_vsnprintf=vsnprintf"
		])

		conf.env.GAMELIB_EXT = ".so"

	if not conf.options.use_voicemgr:
		conf.env.append_unique('DEFINES', 'NO_VOICEGAMEMGR')

	if conf.env.BIT32_ALLOW64:
		conf.env.GAMELIB_TARGET_CLIENT = "client64"
		conf.env.GAMELIB_TARGET_SERVER = "hl64"
	else:
		conf.env.GAMELIB_TARGET_CLIENT = "client"
		conf.env.GAMELIB_TARGET_SERVER = "hl"

def __build_server(bld, gameMenuSharedSources):
	sources = SERVER_SOURCES

	if bld.env.USE_VOICEMGR:
		sources += [ "game_shared/voice_gamemgr.cpp" ]

	bld.shlib(
		target = bld.env.GAMELIB_TARGET_SERVER + bld.env.GAMELIB_EXT,
		includes = COMMON_INCLUDE_PATHS + SERVER_INCLUDE_PATHS,
		source = bld.path.ant_glob(sources) + gameMenuSharedSources,
		use = LIBS,
		defines = bld.env.DEFINES,
		install_path = "${PREFIX}/afterburner/dlls",
		features = "c cxx cxxprogram",
		subsystem = bld.env.MSVC_SUBSYSTEM
	)

def __build_client(bld, gameMenuSharedSources):
	bld.shlib(
		target = bld.env.GAMELIB_TARGET_CLIENT + bld.env.GAMELIB_EXT,
		includes = COMMON_INCLUDE_PATHS + CLIENT_INCLUDE_PATHS,
		source = bld.path.ant_glob(CLIENT_SOURCES) + gameMenuSharedSources,
		use = LIBS,
		defines = bld.env.DEFINES + ["CLIENT_DLL", "CLIENT_WEAPONS"],
		install_path = "${PREFIX}/afterburner/cl_dlls",
		features = "c cxx cxxprogram",
		subsystem = bld.env.MSVC_SUBSYSTEM
	)

def build(bld):
	gameMenuSharedSources = bld.path.parent.ant_glob("game_menu_shared/**/*.cpp")

	__build_server(bld, gameMenuSharedSources)
	__build_client(bld, gameMenuSharedSources)
