# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]

on:
  push:
    branches: [ github-actions ]

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   build-linux:
#     name: Build on Ubuntu Latest
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     env:
#       artifactName: afterburner-linux-32bit-$GITHUB_SHA
#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#     - uses: actions/checkout@v2
#       with:
#         submodules: recursive
#     - name: Set up for 32-bit compile
#       run: |
#         sudo dpkg --add-architecture i386
#         sudo apt-get update
#         sudo apt-get install gcc-multilib g++-multilib libsdl2-dev:i386 libfontconfig-dev:i386 libfreetype6-dev:i386
#     # Runs a set of commands using the runners shell
#     - name: Configure for release
#       run: python3 waf configure --disable-vgui --win-style-install --build-type=release --prefix="${{runner.temp}}/${{env.artifactName}}"
#     - name: Clean
#       run: python3 waf clean
#     - name: Build
#       run: python3 waf build
#     - name: Install
#       run: python3 waf install --strip-to-file
#     - name: Create .tar.gz
#       run: |
#         cd "${{runner.temp}}"
#         tar -zcvf "${{env.artifactName}}.tar.gz" --exclude="*.debug" ./${{env.artifactName}}
#     - name: Archive build artifacts
#       uses: actions/upload-artifact@v2
#       with:
#         name: afterburner-linux-32bit
#         # For some stupid reason, the $GITHUB_SHA variable is not expanded in this path string.
#         # Instead, we use a wildcard for the .tar.gz file
#         path: "${{runner.temp}}/*.tar.gz"

jobs:
  build-windows:
    name: Build on Windows Latest
    runs-on: windows-latest
    env:
      artifactName: afterburner-windows-32bit-$env:GITHUB_SHA
      sdl2url: https://www.libsdl.org/release/SDL2-devel-2.0.14-VC.zip
    steps:
      - name: Install 7Zip
        run: |
          $Installer7Zip = $env:TEMP + "\7z1900-x64.msi";
          Invoke-WebRequest "https://www.7-zip.org/a/7z1900-x64.msi" -OutFile $Installer7Zip;
          msiexec /i $Installer7Zip /qb;
          Remove-Item $Installer7Zip;
      - name: Install Python wget
        run: python -m pip install wget
      - name: Download SDL2
        run: |
          pushd ${{runner.temp}}
          md SDL2 -ea 0
          python -c "import wget; wget.download('${{env.sdl2url}}', 'SDL2/SDL2.zip')"
          popd
      - name: Extract SDL2
        run: Expand-Archive -LiteralPath "${{runner.temp}}\SDL2\SDL2.zip" -DestinationPath "${{runner.temp}}\SDL2"
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Configure for release
        run: python waf configure --disable-vgui --win-style-install --build-type=release --prefix="${{runner.temp}}\${{env.artifactName}}" --sdl2="${{runner.temp}}\SDL2\SDL2-2.0.14"
      - name: Clean
        run: python waf clean
      - name: Build
        run: python waf build
      - name: Install
        run: python waf install --strip-to-file
      - name: Create Zip
        run: C:\Program Files\7-Zip\7z.exe a -tzip "${{runner.temp}}\${{env.artifactName}}.zip" "${{runner.temp}}\${{env.artifactName}}\\" "-xr!*.pdb" "-xr!*.lib"
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: afterburner-windows-32bit
          path: "${{runner.temp}}/*.zip"
